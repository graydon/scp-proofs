#lang ivy1.7

include sort
include node
include network
include assertion

# Ivy checks that the following invariants always hold if we start with the initialization state
# (i.e., `after init`) and continuously apply the exported actions below.

# We need a bunch of auxiliary invariants for the prover to avoid spurious CTIs
private {
    invariant [heard_vote_implies_voted] forall SELF, OTHER, VAL . assertion.heard_vote_implies_voted(SELF, OTHER, VAL)
    invariant [heard_accept_implies_accepted] forall SELF, OTHER, VAL . assertion.heard_accept_implies_accepted(SELF, OTHER, VAL)
    invariant [accept_means_at_least_one_vote] forall SELF, VAL . assertion.accept_means_at_least_one_vote(SELF, VAL)
    invariant [if_node_is_ready_to_accept_it_must_accept] forall N, V . assertion.if_node_is_ready_to_accept_it_must_accept(N, V)
    invariant [if_node_is_ready_to_confirm_it_must_confirm] forall N, V . assertion.if_node_is_ready_to_confirm_it_must_confirm(N, V)
    invariant [accepted_implies_node_heard_itself_accept] forall N, V . assertion.accepted_implies_node_heard_itself_accept(N, V)
    invariant [voted_implies_node_heard_itself_vote] forall N, V . assertion.voted_implies_node_heard_itself_vote(N, V)
    invariant [confirmed_implies_it_heard_at_least_one_node_accept] forall N, V . assertion.confirmed_implies_it_heard_at_least_one_node_accept(N, V)
    invariant [accepted_implies_at_least_one_node_voted] forall V . assertion.accepted_implies_at_least_one_node_voted(V)
    invariant [confirmed_implies_accepted] forall N, V . assertion.confirmed_implies_accepted(N, V)
    invariant [confirmed_implies_there_exists_quorum_accepting_value] forall N, V . assertion.confirmed_implies_there_exists_quorum_accepting_value(N, V)
    invariant [heard_quorum_accept_implies_confirmed] forall N, V . assertion.heard_quorum_accept_implies_confirmed(N, V)
}

invariant [confirm_same_after_sufficient_messages] forall V . assertion.confirm_same_after_sufficient_messages(V)

export network.deliver_vote
export network.deliver_accept
export node.vote
export node.add_leader
