#lang ivy1.7

# Provide udp-based message-receipt and route messages into nodes.
include udp
instance udp_net : udp_simple(id_t, msg_t)
export udp_net.recv

isolate network =
{
    implement udp_net.recv(dst:id_t, m:msg_t)
    {
        call node.recv(dst, m)
    }

    action broadcast(self_id:id_t, k:msg_kind_t, v:val_t)
    action bcast_msg(src:id_t, m:msg_t)

    implementation
    {
        implement bcast_msg(src:id_t, m:msg_t)
        {
            var iter := id_t.iter.create(0);
            while ~iter.is_end
            {
                call udp_net.send(src, iter.val, m);
                iter := iter.next;
            }
        }

        implement broadcast(self_id:id_t, k:msg_kind_t, v:val_t)
        {
            local m:msg_t
            {
                kind(m) := k;
                val(m) := v;
                src(m) := self_id;
                call bcast_msg(self_id, m);
            }
        }
    }
}
with id_t, udp_net, node

